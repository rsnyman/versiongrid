# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from versiongrid.models.base_model_ import Model
from versiongrid.models.version_environments import VersionEnvironments
from versiongrid import util

from versiongrid.models.version_environments import VersionEnvironments  # noqa: E501

class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, component_id=None, commit=None, image_tag=None, template_ref=None, revision=None, version=None, created=None, environments=None):  # noqa: E501
        """Version - a model defined in OpenAPI

        :param id: The id of this Version.  # noqa: E501
        :type id: str
        :param component_id: The component_id of this Version.  # noqa: E501
        :type component_id: str
        :param commit: The commit of this Version.  # noqa: E501
        :type commit: str
        :param image_tag: The image_tag of this Version.  # noqa: E501
        :type image_tag: str
        :param template_ref: The template_ref of this Version.  # noqa: E501
        :type template_ref: str
        :param revision: The revision of this Version.  # noqa: E501
        :type revision: str
        :param version: The version of this Version.  # noqa: E501
        :type version: str
        :param created: The created of this Version.  # noqa: E501
        :type created: str
        :param environments: The environments of this Version.  # noqa: E501
        :type environments: List[VersionEnvironments]
        """
        self.openapi_types = {
            'id': str,
            'component_id': str,
            'commit': str,
            'image_tag': str,
            'template_ref': str,
            'revision': str,
            'version': str,
            'created': str,
            'environments': List[VersionEnvironments]
        }

        self.attribute_map = {
            'id': 'id',
            'component_id': 'component_id',
            'commit': 'commit',
            'image_tag': 'image_tag',
            'template_ref': 'template_ref',
            'revision': 'revision',
            'version': 'version',
            'created': 'created',
            'environments': 'environments'
        }

        self._id = id
        self._component_id = component_id
        self._commit = commit
        self._image_tag = image_tag
        self._template_ref = template_ref
        self._revision = revision
        self._version = version
        self._created = created
        self._environments = environments

    @classmethod
    def from_dict(cls, dikt) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Version of this Version.  # noqa: E501
        :rtype: Version
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Version.


        :return: The id of this Version.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Version.


        :param id: The id of this Version.
        :type id: str
        """

        self._id = id

    @property
    def component_id(self):
        """Gets the component_id of this Version.


        :return: The component_id of this Version.
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this Version.


        :param component_id: The component_id of this Version.
        :type component_id: str
        """

        self._component_id = component_id

    @property
    def commit(self):
        """Gets the commit of this Version.


        :return: The commit of this Version.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Version.


        :param commit: The commit of this Version.
        :type commit: str
        """

        self._commit = commit

    @property
    def image_tag(self):
        """Gets the image_tag of this Version.


        :return: The image_tag of this Version.
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this Version.


        :param image_tag: The image_tag of this Version.
        :type image_tag: str
        """

        self._image_tag = image_tag

    @property
    def template_ref(self):
        """Gets the template_ref of this Version.


        :return: The template_ref of this Version.
        :rtype: str
        """
        return self._template_ref

    @template_ref.setter
    def template_ref(self, template_ref):
        """Sets the template_ref of this Version.


        :param template_ref: The template_ref of this Version.
        :type template_ref: str
        """

        self._template_ref = template_ref

    @property
    def revision(self):
        """Gets the revision of this Version.


        :return: The revision of this Version.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Version.


        :param revision: The revision of this Version.
        :type revision: str
        """

        self._revision = revision

    @property
    def version(self):
        """Gets the version of this Version.


        :return: The version of this Version.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Version.


        :param version: The version of this Version.
        :type version: str
        """

        self._version = version

    @property
    def created(self):
        """Gets the created of this Version.


        :return: The created of this Version.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Version.


        :param created: The created of this Version.
        :type created: str
        """

        self._created = created

    @property
    def environments(self):
        """Gets the environments of this Version.


        :return: The environments of this Version.
        :rtype: List[VersionEnvironments]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this Version.


        :param environments: The environments of this Version.
        :type environments: List[VersionEnvironments]
        """

        self._environments = environments
